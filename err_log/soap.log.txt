C:\Devel\python_training_mantis\env\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm Community Edition 2017.1.4\helpers\pycharm\_jb_pytest_runner.py" --path C:/Devel/python_training_mantis/test/test_add_project.py
Testing started at 15:50 ...
Launching py.test with arguments C:/Devel/python_training_mantis/test/test_add_project.py in C:\Devel\python_training_mantis\test
============================= test session starts =============================
platform win32 -- Python 3.6.1, pytest-3.2.1, py-1.4.34, pluggy-0.4.0
rootdir: C:\Devel\python_training_mantis\test, inifile:
collected 1 item

test_add_project.py F<suds.sax.document.Document object at 0x03C94F30>

test_add_project.py:4 (test_add_project_soap[None:nameG-}]2; development; dsc B^]"JAP= m[v?)4Wl l!*K -^3])
self = <suds.transport.https.HttpAuthenticated object at 0x030A9A30>
request = <suds.transport.Request object at 0x03C94E50>

    def send(self, request):
        result = None
        url = self.__get_request_url(request)
        msg = request.message
        headers = request.headers
        try:
            u2request = urllib.request.Request(url, msg, headers)
            self.addcookies(u2request)
            self.proxy = self.options.proxy
            request.headers.update(u2request.headers)
            log.debug('sending:\n%s', request)
>           fp = self.u2open(u2request)

..\env\lib\site-packages\suds\transport\http.py:82:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <suds.transport.https.HttpAuthenticated object at 0x030A9A30>
u2request = <urllib.request.Request object at 0x030AE330>

    def u2open(self, u2request):
        """
            Open a connection.

            @param u2request: A urllib2 request.
            @type u2request: urllib2.Request.
            @return: The opened file-like urllib2 object.
            @rtype: fp

            """
        tm = self.options.timeout
        url = self.u2opener()
        if (sys.version_info < (3, 0)) and (self.u2ver() < 2.6):
            socket.setdefaulttimeout(tm)
            return url.open(u2request)
>       return url.open(u2request, timeout=tm)

..\env\lib\site-packages\suds\transport\http.py:132:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <urllib.request.OpenerDirector object at 0x03CAF3B0>
fullurl = <urllib.request.Request object at 0x030AE330>, data = None
timeout = 90

    def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):
        # accept a URL or a Request object
        if isinstance(fullurl, str):
            req = Request(fullurl, data)
        else:
            req = fullurl
            if data is not None:
                req.data = data

        req.timeout = timeout
        protocol = req.type

        # pre-process request
        meth_name = protocol+"_request"
        for processor in self.process_request.get(protocol, []):
            meth = getattr(processor, meth_name)
            req = meth(req)

        response = self._open(req, data)

        # post-process response
        meth_name = protocol+"_response"
        for processor in self.process_response.get(protocol, []):
            meth = getattr(processor, meth_name)
>           response = meth(req, response)

c:\python36\Lib\urllib\request.py:532:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <urllib.request.HTTPErrorProcessor object at 0x03CAF610>
request = <urllib.request.Request object at 0x030AE330>
response = <http.client.HTTPResponse object at 0x03CAF750>

    def http_response(self, request, response):
        code, msg, hdrs = response.code, response.msg, response.info()

        # According to RFC 2616, "2xx" code indicates that the client's
        # request was successfully received, understood, and accepted.
        if not (200 <= code < 300):
            response = self.parent.error(
>               'http', request, response, code, msg, hdrs)

c:\python36\Lib\urllib\request.py:642:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <urllib.request.OpenerDirector object at 0x03CAF3B0>, proto = 500
args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>], 301: [<urllib.request.HTTPRedirectHandle...ror_default', <urllib.request.Request object at 0x030AE330>, <http.client.HTTPResponse object at 0x03CAF750>, 500, ...)
dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>], 301: [<urllib.request.HTTPRedirectHandler...uest.HTTPRedirectHandler object at 0x03CAF110>], 303: [<urllib.request.HTTPRedirectHandler object at 0x03CAF110>], ...}
meth_name = 'http_error_500', http_err = 1

    def error(self, proto, *args):
        if proto in ('http', 'https'):
            # XXX http[s] protocols are special-cased
            dict = self.handle_error['http'] # https is not different than http
            proto = args[2]  # YUCK!
            meth_name = 'http_error_%s' % proto
            http_err = 1
            orig_args = args
        else:
            dict = self.handle_error
            meth_name = proto + '_error'
            http_err = 0
        args = (dict, proto, meth_name) + args
        result = self._call_chain(*args)
        if result:
            return result

        if http_err:
            args = (dict, 'default', 'http_error_default') + orig_args
>           return self._call_chain(*args)

c:\python36\Lib\urllib\request.py:570:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <urllib.request.OpenerDirector object at 0x03CAF3B0>
chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>], 301: [<urllib.request.HTTPRedirectHandler...uest.HTTPRedirectHandler object at 0x03CAF110>], 303: [<urllib.request.HTTPRedirectHandler object at 0x03CAF110>], ...}
kind = 'default', meth_name = 'http_error_default'
args = (<urllib.request.Request object at 0x030AE330>, <http.client.HTTPResponse object at 0x03CAF750>, 500, 'Internal Server Error', <http.client.HTTPMessage object at 0x03CAF870>)
handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>]
handler = <urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>
func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>>

    def _call_chain(self, chain, kind, meth_name, *args):
        # Handlers raise an exception if no one else should try to handle
        # the request, or return None if they can't but another handler
        # could.  Otherwise, they return the response.
        handlers = chain.get(kind, ())
        for handler in handlers:
            func = getattr(handler, meth_name)
>           result = func(*args)

c:\python36\Lib\urllib\request.py:504:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>
req = <urllib.request.Request object at 0x030AE330>
fp = <http.client.HTTPResponse object at 0x03CAF750>, code = 500
msg = 'Internal Server Error'
hdrs = <http.client.HTTPMessage object at 0x03CAF870>

    def http_error_default(self, req, fp, code, msg, hdrs):
>       raise HTTPError(req.full_url, code, msg, hdrs, fp)
E       urllib.error.HTTPError: HTTP Error 500: Internal Server Error

c:\python36\Lib\urllib\request.py:650: HTTPError

During handling of the above exception, another exception occurred:

self = <suds.client.SoapClient object at 0x03C94DF0>
soapenv = b'<?xml version="1.0" encoding="UTF-8"?><SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" ...assword xsi:type="ns2:string">password</password></ns3:mc_projects_get_user_accessible></ns1:Body></SOAP-ENV:Envelope>'

    def send(self, soapenv):
        """
            Send soap message.
            @param soapenv: A soap envelope to send.
            @type soapenv: L{Document}
            @return: The reply to the sent message.
            @rtype: I{builtin} or I{subclass of} L{Object}
            """
        location = self.location()
        log.debug('sending to (%s)\nmessage:\n%s', location, soapenv)
        original_soapenv = soapenv
        plugins = PluginContainer(self.options.plugins)
        plugins.message.marshalled(envelope=soapenv.root())
        if self.options.prettyxml:
            soapenv = soapenv.str()
        else:
            soapenv = soapenv.plain()
        soapenv = soapenv.encode('utf-8')
        ctx = plugins.message.sending(envelope=soapenv)
        soapenv = ctx.envelope
        if self.options.nosend:
            return RequestContext(self, soapenv, original_soapenv)
        request = Request(location, soapenv)
        request.headers = self.headers()
        try:
            timer = metrics.Timer()
            timer.start()
>           reply = self.options.transport.send(request)

..\env\lib\site-packages\suds\client.py:613:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <suds.transport.https.HttpAuthenticated object at 0x030A9A30>
request = <suds.transport.Request object at 0x03C94E50>

    def send(self, request):
        self.addcredentials(request)
>       return HttpTransport.send(self, request)

..\env\lib\site-packages\suds\transport\https.py:66:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <suds.transport.https.HttpAuthenticated object at 0x030A9A30>
request = <suds.transport.Request object at 0x03C94E50>

    def send(self, request):
        result = None
        url = self.__get_request_url(request)
        msg = request.message
        headers = request.headers
        try:
            u2request = urllib.request.Request(url, msg, headers)
            self.addcookies(u2request)
            self.proxy = self.options.proxy
            request.headers.update(u2request.headers)
            log.debug('sending:\n%s', request)
            fp = self.u2open(u2request)
            self.getcookies(fp, u2request)
            if sys.version_info < (3, 0):
                headers = fp.headers.dict
            else:
                headers = fp.headers
            result = Reply(http.client.OK, headers, fp.read())
            log.debug('received:\n%s', result)
        except urllib.error.HTTPError as e:
            if e.code in (http.client.ACCEPTED, http.client.NO_CONTENT):
                result = None
            else:
>               raise TransportError(e.msg, e.code, e.fp)
E               suds.transport.TransportError: Internal Server Error

..\env\lib\site-packages\suds\transport\http.py:94: TransportError

During handling of the above exception, another exception occurred:

app = <fixture.application.Application object at 0x030B2EF0>
data_project = None:nameG-}]2; development; dsc B^]"JAP= m[v?)4Wl l!*K -^3

    def test_add_project_soap(app, data_project):
        project = data_project
>       old_projects = app.soap.get_project_list("administrator", "password")

test_add_project.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\fixture\soap.py:17: in get_project_list
    r = self.client.service.mc_projects_get_user_accessible(username, password)
..\env\lib\site-packages\suds\client.py:521: in __call__
    return client.invoke(args, kwargs)
..\env\lib\site-packages\suds\client.py:581: in invoke
    result = self.send(soapenv)
..\env\lib\site-packages\suds\client.py:619: in send
    description=tostr(e), original_soapenv=original_soapenv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <suds.client.SoapClient object at 0x03C94DF0>
reply = b'<?xml version="1.0" encoding="UTF-8"?><SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/enc...g conversion</faultstring><detail xsi:type="xsd:string"></detail></SOAP-ENV:Fault></SOAP-ENV:Body></SOAP-ENV:Envelope>'
status = 500, description = 'Internal Server Error'
original_soapenv = <suds.sax.document.Document object at 0x03C94F30>

    def process_reply(self, reply, status=None, description=None,
        original_soapenv=None):
        if status is None:
            status = http.client.OK
        if status in (http.client.ACCEPTED, http.client.NO_CONTENT):
            return
        failed = True
        try:
            if status == http.client.OK:
                log.debug('HTTP succeeded:\n%s', reply)
            else:
                log.debug('HTTP failed - %d - %s:\n%s', status, description,
                    reply)

            # (todo)
            #   Consider whether and how to allow plugins to handle error,
            # httplib.ACCEPTED & httplib.NO_CONTENT replies as well as
            # successful ones.
            #                                 (todo) (27.03.2013.) (Jurko)
            plugins = PluginContainer(self.options.plugins)
            ctx = plugins.message.received(reply=reply)
            reply = ctx.reply

            # SOAP standard states that SOAP errors must be accompanied by HTTP
            # status code 500 - internal server error:
            #
            # From SOAP 1.1 Specification:
            #   In case of a SOAP error while processing the request, the SOAP
            # HTTP server MUST issue an HTTP 500 "Internal Server Error"
            # response and include a SOAP message in the response containing a
            # SOAP Fault element (see section 4.4) indicating the SOAP
            # processing error.
            #
            # From WS-I Basic profile:
            #   An INSTANCE MUST use a "500 Internal Server Error" HTTP status
            # code if the response message is a SOAP Fault.
            replyroot = None
            if status in (http.client.OK, http.client.INTERNAL_SERVER_ERROR):
                replyroot = _parse(reply)
                plugins.message.parsed(reply=replyroot)
                fault = self.get_fault(replyroot)
                if fault:
                    if status != http.client.INTERNAL_SERVER_ERROR:
                        log.warn("Web service reported a SOAP processing "
                            "fault using an unexpected HTTP status code %d. "
                            "Reporting as an internal server error.", status)
                    if self.options.faults:
>                       raise WebFault(fault, replyroot)
E                       suds.WebFault: Server raised fault: 'Error Type: SYSTEM NOTICE,
E                       Error Description: Array to string conversion'

..\env\lib\site-packages\suds\client.py:670: WebFault


================================== FAILURES ===================================
 test_add_project_soap[None:nameG-}]2; development; dsc B^]"JAP= m[v?)4Wl l!*K -^3]

self = <suds.transport.https.HttpAuthenticated object at 0x030A9A30>
request = <suds.transport.Request object at 0x03C94E50>

    def send(self, request):
        result = None
        url = self.__get_request_url(request)
        msg = request.message
        headers = request.headers
        try:
            u2request = urllib.request.Request(url, msg, headers)
            self.addcookies(u2request)
            self.proxy = self.options.proxy
            request.headers.update(u2request.headers)
            log.debug('sending:\n%s', request)
>           fp = self.u2open(u2request)

..\env\lib\site-packages\suds\transport\http.py:82:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <suds.transport.https.HttpAuthenticated object at 0x030A9A30>
u2request = <urllib.request.Request object at 0x030AE330>

    def u2open(self, u2request):
        """
            Open a connection.

            @param u2request: A urllib2 request.
            @type u2request: urllib2.Request.
            @return: The opened file-like urllib2 object.
            @rtype: fp

            """
        tm = self.options.timeout
        url = self.u2opener()
        if (sys.version_info < (3, 0)) and (self.u2ver() < 2.6):
            socket.setdefaulttimeout(tm)
            return url.open(u2request)
>       return url.open(u2request, timeout=tm)

..\env\lib\site-packages\suds\transport\http.py:132:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <urllib.request.OpenerDirector object at 0x03CAF3B0>
fullurl = <urllib.request.Request object at 0x030AE330>, data = None
timeout = 90

    def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):
        # accept a URL or a Request object
        if isinstance(fullurl, str):
            req = Request(fullurl, data)
        else:
            req = fullurl
            if data is not None:
                req.data = data

        req.timeout = timeout
        protocol = req.type

        # pre-process request
        meth_name = protocol+"_request"
        for processor in self.process_request.get(protocol, []):
            meth = getattr(processor, meth_name)
            req = meth(req)

        response = self._open(req, data)

        # post-process response
        meth_name = protocol+"_response"
        for processor in self.process_response.get(protocol, []):
            meth = getattr(processor, meth_name)
>           response = meth(req, response)

c:\python36\Lib\urllib\request.py:532:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <urllib.request.HTTPErrorProcessor object at 0x03CAF610>
request = <urllib.request.Request object at 0x030AE330>
response = <http.client.HTTPResponse object at 0x03CAF750>

    def http_response(self, request, response):
        code, msg, hdrs = response.code, response.msg, response.info()

        # According to RFC 2616, "2xx" code indicates that the client's
        # request was successfully received, understood, and accepted.
        if not (200 <= code < 300):
            response = self.parent.error(
>               'http', request, response, code, msg, hdrs)

c:\python36\Lib\urllib\request.py:642:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <urllib.request.OpenerDirector object at 0x03CAF3B0>, proto = 500
args = ({'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>], 301: [<urllib.request.HTTPRedirectHandle...ror_default', <urllib.request.Request object at 0x030AE330>, <http.client.HTTPResponse object at 0x03CAF750>, 500, ...)
dict = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>], 301: [<urllib.request.HTTPRedirectHandler...uest.HTTPRedirectHandler object at 0x03CAF110>], 303: [<urllib.request.HTTPRedirectHandler object at 0x03CAF110>], ...}
meth_name = 'http_error_500', http_err = 1

    def error(self, proto, *args):
        if proto in ('http', 'https'):
            # XXX http[s] protocols are special-cased
            dict = self.handle_error['http'] # https is not different than http
            proto = args[2]  # YUCK!
            meth_name = 'http_error_%s' % proto
            http_err = 1
            orig_args = args
        else:
            dict = self.handle_error
            meth_name = proto + '_error'
            http_err = 0
        args = (dict, proto, meth_name) + args
        result = self._call_chain(*args)
        if result:
            return result

        if http_err:
            args = (dict, 'default', 'http_error_default') + orig_args
>           return self._call_chain(*args)

c:\python36\Lib\urllib\request.py:570:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <urllib.request.OpenerDirector object at 0x03CAF3B0>
chain = {'default': [<urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>], 301: [<urllib.request.HTTPRedirectHandler...uest.HTTPRedirectHandler object at 0x03CAF110>], 303: [<urllib.request.HTTPRedirectHandler object at 0x03CAF110>], ...}
kind = 'default', meth_name = 'http_error_default'
args = (<urllib.request.Request object at 0x030AE330>, <http.client.HTTPResponse object at 0x03CAF750>, 500, 'Internal Server Error', <http.client.HTTPMessage object at 0x03CAF870>)
handlers = [<urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>]
handler = <urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>
func = <bound method HTTPDefaultErrorHandler.http_error_default of <urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>>

    def _call_chain(self, chain, kind, meth_name, *args):
        # Handlers raise an exception if no one else should try to handle
        # the request, or return None if they can't but another handler
        # could.  Otherwise, they return the response.
        handlers = chain.get(kind, ())
        for handler in handlers:
            func = getattr(handler, meth_name)
>           result = func(*args)

c:\python36\Lib\urllib\request.py:504:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <urllib.request.HTTPDefaultErrorHandler object at 0x03CAF1B0>
req = <urllib.request.Request object at 0x030AE330>
fp = <http.client.HTTPResponse object at 0x03CAF750>, code = 500
msg = 'Internal Server Error'
hdrs = <http.client.HTTPMessage object at 0x03CAF870>

    def http_error_default(self, req, fp, code, msg, hdrs):
>       raise HTTPError(req.full_url, code, msg, hdrs, fp)
E       urllib.error.HTTPError: HTTP Error 500: Internal Server Error

c:\python36\Lib\urllib\request.py:650: HTTPError

During handling of the above exception, another exception occurred:

self = <suds.client.SoapClient object at 0x03C94DF0>
soapenv = b'<?xml version="1.0" encoding="UTF-8"?><SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" ...assword xsi:type="ns2:string">password</password></ns3:mc_projects_get_user_accessible></ns1:Body></SOAP-ENV:Envelope>'

    def send(self, soapenv):
        """
            Send soap message.
            @param soapenv: A soap envelope to send.
            @type soapenv: L{Document}
            @return: The reply to the sent message.
            @rtype: I{builtin} or I{subclass of} L{Object}
            """
        location = self.location()
        log.debug('sending to (%s)\nmessage:\n%s', location, soapenv)
        original_soapenv = soapenv
        plugins = PluginContainer(self.options.plugins)
        plugins.message.marshalled(envelope=soapenv.root())
        if self.options.prettyxml:
            soapenv = soapenv.str()
        else:
            soapenv = soapenv.plain()
        soapenv = soapenv.encode('utf-8')
        ctx = plugins.message.sending(envelope=soapenv)
        soapenv = ctx.envelope
        if self.options.nosend:
            return RequestContext(self, soapenv, original_soapenv)
        request = Request(location, soapenv)
        request.headers = self.headers()
        try:
            timer = metrics.Timer()
            timer.start()
>           reply = self.options.transport.send(request)

..\env\lib\site-packages\suds\client.py:613:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <suds.transport.https.HttpAuthenticated object at 0x030A9A30>
request = <suds.transport.Request object at 0x03C94E50>

    def send(self, request):
        self.addcredentials(request)
>       return HttpTransport.send(self, request)

..\env\lib\site-packages\suds\transport\https.py:66:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <suds.transport.https.HttpAuthenticated object at 0x030A9A30>
request = <suds.transport.Request object at 0x03C94E50>

    def send(self, request):
        result = None
        url = self.__get_request_url(request)
        msg = request.message
        headers = request.headers
        try:
            u2request = urllib.request.Request(url, msg, headers)
            self.addcookies(u2request)
            self.proxy = self.options.proxy
            request.headers.update(u2request.headers)
            log.debug('sending:\n%s', request)
            fp = self.u2open(u2request)
            self.getcookies(fp, u2request)
            if sys.version_info < (3, 0):
                headers = fp.headers.dict
            else:
                headers = fp.headers
            result = Reply(http.client.OK, headers, fp.read())
            log.debug('received:\n%s', result)
        except urllib.error.HTTPError as e:
            if e.code in (http.client.ACCEPTED, http.client.NO_CONTENT):
                result = None
            else:
>               raise TransportError(e.msg, e.code, e.fp)
E               suds.transport.TransportError: Internal Server Error

..\env\lib\site-packages\suds\transport\http.py:94: TransportError

During handling of the above exception, another exception occurred:

app = <fixture.application.Application object at 0x030B2EF0>
data_project = None:nameG-}]2; development; dsc B^]"JAP= m[v?)4Wl l!*K -^3

    def test_add_project_soap(app, data_project):
        project = data_project
>       old_projects = app.soap.get_project_list("administrator", "password")

test_add_project.py:7:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\fixture\soap.py:17: in get_project_list
    r = self.client.service.mc_projects_get_user_accessible(username, password)
..\env\lib\site-packages\suds\client.py:521: in __call__
    return client.invoke(args, kwargs)
..\env\lib\site-packages\suds\client.py:581: in invoke
    result = self.send(soapenv)
..\env\lib\site-packages\suds\client.py:619: in send
    description=tostr(e), original_soapenv=original_soapenv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <suds.client.SoapClient object at 0x03C94DF0>
reply = b'<?xml version="1.0" encoding="UTF-8"?><SOAP-ENV:Envelope SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/enc...g conversion</faultstring><detail xsi:type="xsd:string"></detail></SOAP-ENV:Fault></SOAP-ENV:Body></SOAP-ENV:Envelope>'
status = 500, description = 'Internal Server Error'
original_soapenv = <suds.sax.document.Document object at 0x03C94F30>

    def process_reply(self, reply, status=None, description=None,
        original_soapenv=None):
        if status is None:
            status = http.client.OK
        if status in (http.client.ACCEPTED, http.client.NO_CONTENT):
            return
        failed = True
        try:
            if status == http.client.OK:
                log.debug('HTTP succeeded:\n%s', reply)
            else:
                log.debug('HTTP failed - %d - %s:\n%s', status, description,
                    reply)

            # (todo)
            #   Consider whether and how to allow plugins to handle error,
            # httplib.ACCEPTED & httplib.NO_CONTENT replies as well as
            # successful ones.
            #                                 (todo) (27.03.2013.) (Jurko)
            plugins = PluginContainer(self.options.plugins)
            ctx = plugins.message.received(reply=reply)
            reply = ctx.reply

            # SOAP standard states that SOAP errors must be accompanied by HTTP
            # status code 500 - internal server error:
            #
            # From SOAP 1.1 Specification:
            #   In case of a SOAP error while processing the request, the SOAP
            # HTTP server MUST issue an HTTP 500 "Internal Server Error"
            # response and include a SOAP message in the response containing a
            # SOAP Fault element (see section 4.4) indicating the SOAP
            # processing error.
            #
            # From WS-I Basic profile:
            #   An INSTANCE MUST use a "500 Internal Server Error" HTTP status
            # code if the response message is a SOAP Fault.
            replyroot = None
            if status in (http.client.OK, http.client.INTERNAL_SERVER_ERROR):
                replyroot = _parse(reply)
                plugins.message.parsed(reply=replyroot)
                fault = self.get_fault(replyroot)
                if fault:
                    if status != http.client.INTERNAL_SERVER_ERROR:
                        log.warn("Web service reported a SOAP processing "
                            "fault using an unexpected HTTP status code %d. "
                            "Reporting as an internal server error.", status)
                    if self.options.faults:
>                       raise WebFault(fault, replyroot)
E                       suds.WebFault: Server raised fault: 'Error Type: SYSTEM NOTICE,
E                       Error Description: Array to string conversion'

..\env\lib\site-packages\suds\client.py:670: WebFault
---------------------------- Captured stderr call -----------------------------
<suds.sax.document.Document object at 0x03C94F30>
========================== 1 failed in 17.59 seconds ==========================

Process finished with exit code 0
